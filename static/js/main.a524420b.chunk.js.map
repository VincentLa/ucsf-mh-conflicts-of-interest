{"version":3,"sources":["actions/actions.js","actions/search.js","components/SearchBar.js","components/BoxPlot.js","components/Plots.js","components/Search.js","components/About.js","App.js","serviceWorker.js","reducers/appState.js","reducers/index.js","index.js"],"names":["SEARCH","search","physician_name","type","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setText","bind","assertThisInitialized","keyPress","state","query","setState","e","keyCode","target","value","_this2","react_default","a","createElement","className","placeholder","onChange","onKeyDown","React","Component","connect","dispatch","bindActionCreators","BoxPlot","index_es","width","height","orientation","min","quartiles","max","stats","whiskerLow","quartile1","quartile2","quartile3","whiskerHigh","outliers","highlight","Plots","physician_data","brandNamesPercentile","percentile_percentage_brand_claims","brandNamesRaw","percentage_brand_claims","drugCostPercentile","percentile_avg_drug_cost","drugCostRaw","avg_drug_cost","paymentPercentile","percentile_total_payments","components_BoxPlot","appState","Search","components_SearchBar","components_Plots","About","App","react_router_dom","role","aria-label","to","react_router","path","component","Boolean","window","location","hostname","match","initialState","searchResults","name","i","results","length","arguments","undefined","action","objectSpread","combineReducers","logger","createLogger","stateTransformer","newState","_arr","keys","_i","Immutable","Iterable","isIterable","toJS","store","createStore","rootReducer","applyMiddleware","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a524420b.chunk.js","sourcesContent":["export const SEARCH = \"SEARCH\";\n\n","import { SEARCH } from './actions';\n\nexport function search (physician_name) {\n    return {\n        type: SEARCH,\n        physician_name\n    }\n}","import React from 'react';\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from 'redux'\n\nimport {search} from \"../actions/search\"\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.setText = this.setText.bind(this)\n    this.keyPress = this.keyPress.bind(this)\n    this.state = {query: \"\"}\n  }\n\n  setText() {\n    this.setState({query: \"\"})\n  }\n\n  keyPress(e){\n    if(e.keyCode === 13){\n      this.props.search(e.target.value)\n    }\n }\n \n  render() {\n    return (\n      <div>\n        <input \n          className=\"input\" \n          type=\"text\" \n          placeholder=\"First and Last\"\n          onChange = {(e) => this.setText(e.target.value)}\n          onKeyDown = {this.keyPress}\n          />\n      </div>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    search: search\n  },\n    dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar);\n","import React from 'react';\nimport { Boxplot } from 'react-boxplot'\n\nclass BoxPlot extends React.Component {\n  render() {\n      return (\n        <Boxplot\n            width={400}\n            height={40}\n            orientation=\"horizontal\"\n            min={this.props.quartiles[0]}\n            max={this.props.quartiles[4]}\n            stats={{\n                whiskerLow: this.props.quartiles[0],\n                quartile1: this.props.quartiles[1],\n                quartile2: this.props.quartiles[2],\n                quartile3: this.props.quartiles[3],\n                whiskerHigh: this.props.quartiles[4],\n                outliers: [this.props.highlight],\n              }}\n        />\n      )\n  }\n}\n\nexport default BoxPlot\n","import React from 'react';\nimport { connect } from \"react-redux\"\nimport BoxPlot from \"./BoxPlot\"\n\nclass Plots extends React.Component {\n  render() {\n    if (this.props.physician_data) {\n      if (this.props.physician_data === \"not found\") {\n        return (\n          <p>Provider Not Found</p>\n        )\n      }\n      let brandNamesPercentile = this.props.physician_data.percentile_percentage_brand_claims\n      let brandNamesRaw = this.props.physician_data.percentage_brand_claims\n      let drugCostPercentile = this.props.physician_data.percentile_avg_drug_cost\n      let drugCostRaw = this.props.physician_data.avg_drug_cost\n\n      let paymentPercentile = this.props.physician_data.percentile_total_payments\n\n      return (\n        <div>\n          <h1>Where this provider lies on average</h1>\n          <div className=\"box\">\n            <h4>Percentage of Prescriptions that are Brand Name Drugs</h4>\n            <BoxPlot \n              highlight={brandNamesRaw}\n              quartiles={[0, 0.169, 0.217, 0.284, 1]}\n              />\n            <p>percentile: {brandNamesPercentile}</p>\n            <br/>\n            <h4>Average Total Drug Cost of Prescriptions</h4>\n            <BoxPlot \n              highlight={drugCostRaw}\n              quartiles={[9.6, 52.56, 85.87, 119.65, 528.38]}\n            />\n            <p>percentile: {drugCostPercentile}</p>\n            <br/>\n            <h4>percentile of payments</h4>\n            <BoxPlot\n              highlight={paymentPercentile}\n              quartiles={[0, 25, 50, 75, 100]}\n            />\n          </div>\n        </div>\n      )\n    }\n    return null\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    physician_data: state.appState.physician_data,\n    physician_name: state.appState.physician_name\n  }\n}\n\nexport default connect(mapStateToProps, null)(Plots);\n","import React from 'react';\n\nimport SearchBar from \"./SearchBar\"\nimport Plots from \"./Plots\"\n\nclass Search extends React.Component {\n  render() {\n    return (\n      <div className=\"box\">\n        <SearchBar/>\n        <hr/>\n        <Plots/>\n      </div>\n    )\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport { connect } from \"react-redux\"\n\nclass About extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n \n  render() {\n      return (\n        <div className=\"container\">\n            <p>\n                In Project Finance and Rx, we use San Francisco as a case study to explore the link between financial contributions and prescribing behavior for mental health providers. Our goal is to create an educational tool that informs the public, empowers policy makers and researchers to understand the current state of the system, and allows providers to see where they lie in terms of brand-name prescriptions relative to other psychiatrists in the same geographic location. The tool serves as a natural extension of ProPublica’s Dollars for Docs project that already shows how much providers across the country received in payments from the pharmaceutical industry.\n        Ultimately, our end goal is to empower both patients and providers to result in better cost-effective care to improve healthcare outcomes. This is not to say that we think that BigPharma has “corrupted” the entire industry. We also believe that strong relationships between physicians and industry are necessary; often, pharmaceutical companies fund large research projects that produces advances in medical care. Our goal is to provide transparency in an area that has been not as frequently discussed and ensure that financial incentives are as aligned as possible to ensure the best healthcare outcomes.\n            </p>\n        </div>\n      )\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport 'bulma/css/bulma.css'\nimport Search from \"./components/Search\"\nimport About from \"./components/About\"\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-menu\">\n                <div className=\"navbar-start\">\n                    <Link to={'/search'} className=\"navbar-item\">Search</Link>\n                    <Link to={'/about'} className=\"navbar-item\">About</Link>\n                </div>\n            </div>\n        </nav>\n        <hr/>\n        <Switch>\n              <Route path='/search' component={Search} />\n              <Route path='/about' component={About} />\n          </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEARCH } from '../actions/actions.js';\nimport results from \"./data.json\"\n\nconst initialState = {\n  physician_name: \"\",\n  physician_data: null\n}\n\nconst appState = (state = initialState, action) => {\n  switch (action.type) {\n    case SEARCH: \n      return {...state, \n        physician_name: action.physician_name,\n        physician_data: searchResults(action.physician_name)\n      } \n    default: \n      return state;\n  }\n}\n\nfunction searchResults(name) {\n  var i\n  for (i = 0; i < results.length; i++) {\n    if (results[i][\"provider_full_name\"] === name) {\n      return results[i]\n    }\n  }\n  return \"not found\"\n}\nexport default appState;\n\n","import { combineReducers } from 'redux';\nimport appState from './appState';\n\n\nexport default combineReducers({\n    appState\n})\n\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nimport { createLogger } from 'redux-logger';\nimport Immutable from 'immutable';\n\n\n\nconst logger = createLogger({\n  stateTransformer: (state) => {\n    let newState = {};\n\n    for (var i of Object.keys(state)) {\n      if (Immutable.Iterable.isIterable(state[i])) {\n        newState[i] = state[i].toJS();\n      } else {\n        newState[i] = state[i];\n      }\n    };\n\n    return newState;\n  }\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(logger)\n)\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}